#!/usr/bin/env node
var path = require('path'),
  fs = require('fs'),
  spawn = require('child_process').spawn,
  wrench = require('wrench'),
  argv = require('optimist')
    .default('c', './cable')
    .argv

var home = process.env.HOME

// if HOME not set, die
if (home == undefined) {
  console.log('Error: HOME environmental variable not defined.')
  process.exit()
}

var dejaHome = home + '/.deja'

// make sure .deja exists in home directory
try {
  fs.mkdirSync(dejaHome, 0700)
} catch(e) {}

var valid_command = false

// deal with command line input
if (argv['_'].length < 1 || argv['_'].length > 2) {

  console.log(usage())
  process.exit(0)
}
else if(argv['_'].length == 2) {

  var command = argv['_'][0]
  var param   = argv['_'][1]

  switch(command) {

    case 'clone':
      valid_command = true
      cloneRepo(home, dejaHome, param)
      break

    case 'pull':
      valid_command = true
      pullRepo(dejaHome, param)
      break

    case 'diff':
      valid_command = true
      diffRepo(dejaHome, param)
      break

    case 'rm':
      valid_command = true
      rmRepo(dejaHome, param)
      break
  }
}
else {

  var command = argv['_'][0]

  if (command == 'ls') {
    valid_command = true
    ls(dejaHome)
  }
}

if (!valid_command) {
  console.log('Unrecognized command.')
}

function usage() {

  return "deja == a simple tool for managing git versioning of dotfiles/scripts.\n\
\n\
Usage: \n\
deja clone <GIT REPO>\n\
deja ls\n\
deja pull <REPO>\n\
deja rm <REPO>"
}

function ls(dejaHome) {

  children = fs.readdirSync(dejaHome)

  for(var index in children) {

    // need to check legitimacy of archive
    var entry = children[index]
    console.log(entry)
  }
}

function pullRepo(dejaHome, repo) {

  var destination = dejaHome + '/' + repo

  path.exists(destination, function(exists) {

    if (exists) {
      process.chdir(destination)

      var pull = spawn('git', ['pull'])

      pull.on('exit', function(code) {

        if (code == 0) {
          console.log('Pull complete.')
        }
        else {
          console.log('Error: Could not pull.')
          process.exit(code)
        }
      })
    }
    else {

      console.log('Error: Not a valid repo.')
    }
  })
}

function rmRepo(dejaHome, repo) {

  var destination = dejaHome + '/' + repo

  path.exists(destination, function(exists) {

    if (exists) {

      wrench.rmdirSyncRecursive(destination)
      console.log('Repo removed.')
    }
    else {

      console.log('Error: Not a valid repo.')
    }
  })
}

function cloneRepo(home, dejaHome, repo) {

  var basename = path.basename(repo)

  var destination = dejaHome + '/' + basename

  path.exists(destination, function(exists) {

  // add check to see if basename already exists
  // maybe username should be added to basename
  // or maybe basename should be MD5 of repo?
  // ..not a big deal whatever

    if (exists) {

      console.log('Error: Repo already exists.')
      process.exit()
    }
    else {

      var clone = spawn('git', ['clone', repo, destination])

      clone.on('exit', function(code) {

// add error handling is code is bad
        // cycle through cloned repo making symlinks to home, promping if files exist when the symlink would otherwise go
        children = fs.readdirSync(destination)

        for(var index in children) {

          var file = children[index]
          if (file != '.git') {

            var symlinkPath = destination + '/' + file
            var filepath = home + '/' + file

            createSymlink(symlinkPath, filepath)
          }
        }
      })
    }
  })
}

function diffRepo(dejaHome, param) {

  var destination = dejaHome + '/' + param

  path.exists(destination, function(exists) {

    if (exists) {

      children = fs.readdirSync(destination)

      for(var index in children) {

        var file = children[index]

        if (file != '.git') {
console.log('fff:' + file)
          diffIfNotSymbolicLink(home, dejaHome, file)
        }
      }
    }
    else {

      console.log('Error: Not a valid repo.')
    }
  })
}

function diffIfNotSymbolicLink(home, dejaHome, file) {

console.log(file)
  homeFilePath = home + '/' + file
  repoFilePath = dejaHome + '/' + file
console.log(homeFilePath)

  fs.lstat(homeFilePath, function(err, stats) {
    if (!stats.isSymbolicLink()) {
      console.log('diff ' + homeFilePath + ' ' + repoFilePath)
    }
  })
}

function createSymlink(symlinkPath, filepath) {

  path.exists(filepath, function(exists) {

    if (!exists) {

      console.log(symlinkPath + ' -> ' + filepath)

      spawn('ln', ['-s', symlinkPath, filepath])
    }
    else {

      console.log('Skipped ' + filepath + ': already exists.')
    }
  })
}
